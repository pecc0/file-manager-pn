<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
	width="100%"
	height="100%"
	creationComplete="initCollections();"
	>
	<mx:Script>
	<![CDATA[
		import com.filemanagerpn.UploadDownloadDialog;
		import com.filemanagerpn.SelectDestinationDialog;
		import com.filemanagerpn.SelectDirectoryDialog;
		import mx.events.CloseEvent;
		import com.filemanagerpn.DialogFileSelectedEvent;
		import com.filemanagerpn.SaveFileDialog;
		import com.filemanagerpn.OpenSaveFileDialog;
		import com.filemanagerpn.TextI18n;
		import com.filemanagerpn.DataPost;
		import com.filemanagerpn.DirectoryEvent;
		import mx.events.TreeEvent;
		import mx.collections.XMLListCollection;
		import mx.controls.Alert;
		import mx.events.MenuEvent;
		
		public static const SELECTED_NODE_CHANGED:String="selectedNodeChanged";
		public static const LISTING_RECEIVED:String="listingReceived";
		
		[Bindable]
        public var menuBarCollection:XMLListCollection;
        
		private var menubarXML:XML = 
            <r>
            	<menuitem label="dlFile">
            		<menuitem label="dlRefresh" data="refresh"/>
                    <menuitem label="dlNewDirectory" data="ndir"/>
                    <menuitem label="dlRemove" data="rm"/>
                    <menuitem label="dlCopy" data="copy"/>
                    <menuitem label="dlMove" data="move"/>
                    <menuitem label="dlUpload" data="upload"/>
                    <menuitem label="dlDownload" data="download"/>
                </menuitem>
            </r>;
        
        private function onSaveDlg(event:DialogFileSelectedEvent):void {
        	//tova se izpylnqva kogato potrebitelq natisne "save"
        	Alert.show("result:" + event.file);
        	removeEventListener(OpenSaveFileDialog.FILESELECTED, onSaveDlg);
		}
		
		private function onNewDir(event:DialogFileSelectedEvent):void {
			var dataPost:DataPost = new DataPost(new URLVariables());
			dataPost.setUrl("/secure/fscommand.php");
			dataPost.getData().dir = event.file;
			dataPost.getData().command = "mkdir"
			//I'm sure that the direcory have been loaded
			expandBranch(event.direvent.directory);
			directoryTree.selectedItem = event.direvent.directory;
			
			dataPost.onComplete = onListingReceived;
			dataPost.doPost();
        	removeEventListener(OpenSaveFileDialog.FILESELECTED, onNewDir);
		}
		
		private function removeSelectedFiles(event:CloseEvent):void {
			var dataPost:DataPost = new DataPost(new URLVariables());
			dataPost.setUrl("/secure/fscommand.php");
			dataPost.getData().dir = DirListing.getPathToNode(getSelectedDirectory());
			dataPost.getData().command = "delete"
			trace("deleting " + files);
			var files:String = "";
			for each (var f:XML in tileList.selectedItems) {
				files += f.@name + ";"; 
			}
			dataPost.getData().parameter = files;
			dataPost.onComplete = onListingReceived;
			dataPost.doPost();
		}
		
		private function createCopyMovePost():DataPost {
			var dataPost:DataPost = new DataPost(new URLVariables());
			dataPost.setUrl("/secure/fscommand.php");
			var files:String = "";
			for each (var f:XML in tileList.selectedItems) {
				files += f.@name + ";"; 
			}
			dataPost.getData().dir = DirListing.getPathToNode(getSelectedDirectory());
			dataPost.getData().files = files;
			
			dataPost.onComplete = onListingReceived;
			return dataPost; 
		}
		
		private function onCopy(event:DialogFileSelectedEvent):void {
			var dataPost:DataPost = createCopyMovePost();
			dataPost.getData().command = "copy";
			dataPost.getData().destDir = event.file;
			trace("copying " + dataPost.getData().files + " from " + dataPost.getData().dir + " to " + dataPost.getData().destDir);
			dataPost.doPost();
		}
		
		private function onMove(event:DialogFileSelectedEvent):void {
			var dataPost:DataPost = event.target.parameter;
			dataPost.getData().command = "move";
			dataPost.getData().dest = event.file;
			if (tileList.selectedItems.length <= 1) {
				dataPost.getData().destDir = DirListing.getPathToNode(event.direvent.directory);
			} else {
				dataPost.getData().destDir = event.file; 
			}
			trace("moving " + dataPost.getData().files + " from " + dataPost.getData().dir + 
				" to " + dataPost.getData().destDir + ";" + dataPost.getData().dest);
			dataPost.doPost();
		}
		private function onUploadComplete(event:Event):void {
			refreshNode(getSelectedDirectory(), true);
			trace("upload complete");
		}
        // Event handler for the MenuBar control's itemClick event.
        private function menuHandler(event:MenuEvent):void  {
        	if (event.item.@data == "refresh") {
        		refreshNode(getSelectedDirectory(), true);
        	} else if (event.item.@data == "save") {
        		//tuk se syzdava noviq dialog
        		var dlg:SaveFileDialog = SaveFileDialog.show(this);
        		dlg.addEventListener(OpenSaveFileDialog.FILESELECTED, onSaveDlg);
        	} else if (event.item.@data == "ndir"){
        		var newDirDlg:SaveFileDialog = SaveFileDialog.show(this);
        		newDirDlg.setFile(DirListing.getPathToNode(getSelectedDirectory()));
        		newDirDlg.setMenu(false);
        		newDirDlg.addEventListener(OpenSaveFileDialog.FILESELECTED, onNewDir);
        	} else if (event.item.@data == "rm"){
        		var files:String = "";
				for each (var f:XML in tileList.selectedItems) {
					files += "\"" + f.@name + "\" "; 
				}
				if (files.length > 0) {
	        		Alert.show("Delete " + files + "?", "Delete?", 4, null, 
	        			removeSelectedFiles, null, Alert.YES | Alert.NO);
    			}
    		} else if (event.item.@data == "copy"){
    			if (tileList.selectedItems.length > 0) {
	    			var selectDirDlg:SelectDirectoryDialog = SelectDirectoryDialog.show(this);
	    			selectDirDlg.setFile(DirListing.getPathToNode(getSelectedDirectory()));
	        		selectDirDlg.setMenu(false);
	        		selectDirDlg.addEventListener(OpenSaveFileDialog.FILESELECTED, onCopy);
       			} else {
       				Alert.show(TextI18n.getInstance().getText("selectFile"));
       			}
        	} else if (event.item.@data == "move"){
        		if (tileList.selectedItems.length > 0) {
        			var dlgMove:OpenSaveFileDialog; 
        			var dataPost:DataPost = createCopyMovePost();
        			if (tileList.selectedItems.length == 1) {
        				dlgMove = SelectDestinationDialog.show(this, tileList.selectedItems[0].@name);
        			} else {
        				dlgMove = SelectDirectoryDialog.show(this);
        			}
        			
					dlgMove.parameter = dataPost;
	        		dlgMove.setFile(DirListing.getPathToNode(getSelectedDirectory()));
	        		dlgMove.setMenu(false);
	        		dlgMove.addEventListener(OpenSaveFileDialog.FILESELECTED, onMove);
        		} else {
       				Alert.show(TextI18n.getInstance().getText("selectFile"));
       			}
       		} else if (event.item.@data == "upload"){
       			var uddlg:UploadDownloadDialog = UploadDownloadDialog.show(this, "upload", 
       				DirListing.getPathToNode(getSelectedDirectory()));
       			uddlg.addEventListener(Event.COMPLETE, onUploadComplete); 
       		} else if (event.item.@data == "download"){
       			if (tileList.selectedItems.length > 0) {
       				
       				UploadDownloadDialog.show(this, "download", 
       					DirListing.getPathToNode(getSelectedDirectory()) + "/" + tileList.selectedItems[0].@name);
       			}
        	} else {
	            Alert.show("Label: " + event.item.@label + "\n" + 
	                "Data: " + event.item.@data, "Clicked menu item");
			}
        }
		
		private function menuLabel(item:Object):String {
			return TextI18n.getInstance().getText(item.@label);
		}
		
        // Event handler to initialize the MenuBar control.
        private function initCollections():void {
            menuBarCollection = new XMLListCollection(menubarXML.children());
        }
        
        [Bindable]
        private static var dirlist:XMLList =
          <>
            <dir name="/" isBranch="true">
            	<file name="loading..."/>
            </dir>                              
          </>;
        
        [Bindable]
        private var dirListData:XMLListCollection = new XMLListCollection(dirlist);
        
        [Bindable]
        private var tileListData:XMLListCollection;
     
     	/**
     	 * Opens the file specified by the path parameter. 
     	 * If the path leads to directory, opens the corresponding dir in the dir tree;
     	 * if the path leads to file, opens the dir containing the file 
     	 * and selects the file in the right panel;
     	 * if the file doesn't exist, shows error alert.
     	 * @param path Path to the file
     	 * 
     	 */ 
		public function openFile(path:String):void {
			//trace(getNodeFromPath(getSelectedDirectory(), path, false));
			if (path.charAt(0) != "/") {
				path = getPathToNode(getSelectedDirectory()) + path;
			}
			addEventListener(LISTING_RECEIVED, fileOpened);
			postListingRequest(path);
		}
		
		private function expandBranch(node:XML):void {
			if (node.parent() != undefined) {
				expandBranch(node.parent());
			}
			directoryTree.expandItem(node, true);
		}
		
		private function fileOpened(event:DirectoryEvent):void {
			removeEventListener(LISTING_RECEIVED, fileOpened);
			expandBranch(event.directory);
			directoryTree.selectedItem = event.directory;
			if (event.selectedFile != null && event.selectedFile.length > 0) {
				tileList.selectedItem = tileListData.source.*.(@name==event.selectedFile);
			}
		}
		
        private function onDirTreeChanged(event:Event):void {
        	var newEvent:DirectoryEvent = new DirectoryEvent(SELECTED_NODE_CHANGED);
        	newEvent.directory = getSelectedDirectory();
        	refreshNode(newEvent.directory, false);
        	dispatchEvent(newEvent);
        	tileListData = new XMLListCollection(getSelectedDirectory().*);
        }
        
        public function getSelectedDirectory():XML {
        	var result:XML = null;
        	if (directoryTree != null) {
        		result = XML(directoryTree.selectedItem);
        	}
        	if (result == null) {
        		result = dirlist[0];
        	}
        	if (result.localName() == "file") {
        		result = result.parent();
        	}
        	return result; 
        }
        
        private function refreshNode(node:XML, force:Boolean):void {
        	
        	if (force) {
        		delete node.*;
        		var loadingNode:XML = <file name="loading..."/>;
        		node.appendChild(loadingNode);
        	}
        	if (node.file.@name == "loading...") {
				//Alert.show();
				postListingRequest(getPathToNode(node));
			}
        }
        
		private function treeLabel(item:Object):String
		{
			var node:XML = XML(item);
			return node.@name;
		}
		
		private function tileLabel(item:Object):String {
			var node:XML = XML(item);
			return node.@name;
		}
		
		public static function getPathToNode(node:XML):String {
			if (node.parent() == undefined) {
				return node.@name;
			} else {
				return getPathToNode(node.parent()) + node.@name + "/";
			}
		}
		
		public function getNodeFromPath(root:XML, path:String, forceCreation:Boolean):XML {
			if (path == null || path.length == 0) {
				return root;
			}
			if (path.charAt(0) == "/") {
				return getNodeFromPath(dirlist[0], path.substring(1), forceCreation);
			}
			var slashIndex:int = path.indexOf("/");
			var part1:String;
			var part2:String;
			if (slashIndex > 0){
				part1 = path.substring(0, slashIndex);
				part2 = path.substring(slashIndex + 1);
			} else {
				part1 = path;
			}
			var child:XML;
			var children:XMLList = root.dir.(@name == part1);
			if (children.length() == 0) {
				if (forceCreation) {
					var newNode:XML =
					<dir name="" isBranch="true">
		            	<file name="loading..."/>
		            </dir> 
		            newNode.@name = part1;
		            root.appendChild(newNode);
		            child = newNode;
				} else {
					return root;
				}
			} else {
				child = children[0];
			}
			
			if (part2 == null || part2.length == 0) {
				return child;
			}
			return getNodeFromPath(child, part2, forceCreation);
		}
		
		private function postListingRequest(path:String):void {
			var dataPost:DataPost = new DataPost(new URLVariables());
			dataPost.setUrl("/secure/listdir.php");
			dataPost.getData().dir = path;
			//Alert.show(getNodeFromPath(dirlist[0], dataPost.getData().dir).toString());
			dataPost.onComplete = onListingReceived;
			dataPost.doPost();
		}
		
		private function onListingReceived(request:URLRequest, loader:URLLoader):void {
			var strResult:String = loader.data;
			if (strResult.substr(0, 6) == "error:") {
				Alert.show(TextI18n.getInstance().getText(strResult.substr(6)));
				return;
			}
			XML.ignoreProcessingInstructions = true;
			XML.ignoreWhitespace = true;
			
			var result:XML = new XML(strResult);
			
			var directory:XML = getNodeFromPath(null, result.@listingfor, true);
			
			delete directory.*;
			
			var subdirs:XMLList = result.dir;
			for each (var sd:XML in subdirs) {
				directory.appendChild(sd);
			}
			
			var fileslist:XMLList = result.file;
			for each (var f:XML in fileslist) {
				directory.appendChild(f);
			}
			
			tileListData = new XMLListCollection(getSelectedDirectory().*);
			
			if (request.data.command == "copy" || request.data.command == "move"){
				refreshNode(getNodeFromPath(null, request.data.destDir, false), true);
			}
			
			var newEvent:DirectoryEvent = new DirectoryEvent(LISTING_RECEIVED);
        	newEvent.directory = directory;
        	newEvent.selectedFile = result.@selected;
        	newEvent.userName = result.@username;
        	dispatchEvent(newEvent);
        	
		}
		
		private function treeItemOpening(event:TreeEvent):void {
			//Alert.show(event.item.toString());
			if (event.opening) {
				refreshNode(XML(event.item), false);
			}
		} 
		
    ]]>
    </mx:Script>
	<mx:HBox width="100%" height="100%">
		<mx:VBox width="173" height="100%">
			<mx:MenuBar width="100%"
				dataProvider="{menuBarCollection}"
				labelFunction="menuLabel" 
				itemClick="menuHandler(event);"
				id="menuBar"
				></mx:MenuBar>
			<mx:Tree width="100%" height="100%"
				dataProvider="{dirListData}"
        		labelFunction="treeLabel"
        		itemOpening="treeItemOpening(event);"
        		id="directoryTree"
        		change="onDirTreeChanged(event);"
        		valueCommit="onDirTreeChanged(event);"
				>
				</mx:Tree>
		</mx:VBox>
		<mx:TileList width="100%" height="100%" 
			labelFunction="tileLabel"
			dataProvider="{tileListData}"
			id="tileList"
			rowHeight="50"
			columnWidth="75"
			allowMultipleSelection="true" 
			 fontSize="10" fontFamily="Arial" cornerRadius="0" borderStyle="solid" borderColor="#000000">
		</mx:TileList>
	</mx:HBox>
</mx:Module>
